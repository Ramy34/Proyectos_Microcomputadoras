CCS PCM C Compiler, Version 3.184, 22094

               Filename: C:\Users\ramse\Downloads\Proyecto\main.LST

               ROM used: 185 (2%)
                         Largest free fragment is 2048
               RAM used: 18 (10%) at main() level
                         18 (10%) worst case
               Stack:    1 worst case (0 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   078
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.5
001C:  GOTO   01F
001D:  BTFSC  0C.5
001E:  GOTO   032
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   27,W
002A:  MOVWF  7B
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   035
....................  #include <16f877.h> 
....................  //////// Standard Header file for the PIC16F877 device ////////////////  
.................... #device PIC16F877  
.................... #list  
....................  
.................... #fuses HS,NOPROTECT,  
.................... #use delay(clock=20000000)  
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7)  
.................... #org 0x1F00, 0x1FFF void loader16F877(void) {} //for the 8k 16F876/7  
*
1F00:  RETLW  00
....................   
.................... int periodo = 255,c,val1;  
*
0085:  MOVLW  FF
0086:  MOVWF  28
.................... char b;  
....................   
.................... #int_rda  
.................... teclado(){  
....................    b = getchar();  
*
0035:  BTFSS  0C.5
0036:  GOTO   035
0037:  MOVF   1A,W
0038:  MOVWF  2B
....................    if(b == 'w'){ //Hacia adelante  
0039:  MOVF   2B,W
003A:  SUBLW  77
003B:  BTFSS  03.2
003C:  GOTO   045
.................... 		c = 10;  
003D:  MOVLW  0A
003E:  MOVWF  29
.................... 		output_b(c);  
003F:  MOVLW  00
0040:  BSF    03.5
0041:  MOVWF  06
0042:  BCF    03.5
0043:  MOVF   29,W
0044:  MOVWF  06
....................    }  
....................    if(b == 'a'){ //Hacia la izquierda  
0045:  MOVF   2B,W
0046:  SUBLW  61
0047:  BTFSS  03.2
0048:  GOTO   051
.................... 		c = 6;  
0049:  MOVLW  06
004A:  MOVWF  29
.................... 		output_b(c);  
004B:  MOVLW  00
004C:  BSF    03.5
004D:  MOVWF  06
004E:  BCF    03.5
004F:  MOVF   29,W
0050:  MOVWF  06
....................    }  
....................    if(b == 's'){ //Hacia atras  
0051:  MOVF   2B,W
0052:  SUBLW  73
0053:  BTFSS  03.2
0054:  GOTO   05D
.................... 	   c = 5;  
0055:  MOVLW  05
0056:  MOVWF  29
.................... 	   output_b(c);  
0057:  MOVLW  00
0058:  BSF    03.5
0059:  MOVWF  06
005A:  BCF    03.5
005B:  MOVF   29,W
005C:  MOVWF  06
....................    }  
....................    if(b == 'd'){ //Hacia derecha  
005D:  MOVF   2B,W
005E:  SUBLW  64
005F:  BTFSS  03.2
0060:  GOTO   069
.................... 	   c = 9;  
0061:  MOVLW  09
0062:  MOVWF  29
.................... 	   output_b(c);  
0063:  MOVLW  00
0064:  BSF    03.5
0065:  MOVWF  06
0066:  BCF    03.5
0067:  MOVF   29,W
0068:  MOVWF  06
....................    }  
....................    if(b == 'q'){ //Para  
0069:  MOVF   2B,W
006A:  SUBLW  71
006B:  BTFSS  03.2
006C:  GOTO   074
.................... 	   c = 0;  
006D:  CLRF   29
.................... 	   output_b(c);  
006E:  MOVLW  00
006F:  BSF    03.5
0070:  MOVWF  06
0071:  BCF    03.5
0072:  MOVF   29,W
0073:  MOVWF  06
....................    }  
.................... }  
0074:  BCF    0C.5
0075:  BCF    0A.3
0076:  BCF    0A.4
0077:  GOTO   01F
.................... void main(){  
....................    setup_ccp2(CCP_PWM); //Configura el PWM  
0078:  CLRF   04
0079:  MOVLW  1F
007A:  ANDWF  03,F
007B:  MOVLW  06
007C:  BSF    03.5
007D:  MOVWF  1F
007E:  MOVLW  81
007F:  MOVWF  19
0080:  MOVLW  26
0081:  MOVWF  18
0082:  MOVLW  90
0083:  BCF    03.5
0084:  MOVWF  18
*
0087:  MOVWF  2C
0088:  BCF    2C.1
0089:  MOVF   2C,W
008A:  BSF    03.5
008B:  MOVWF  07
008C:  BCF    03.5
008D:  BCF    07.1
008E:  MOVLW  0C
008F:  MOVWF  1D
....................    setup_timer_2(T2_DIV_BY_16,periodo,1);  
0090:  MOVLW  00
0091:  MOVWF  78
0092:  IORLW  06
0093:  MOVWF  12
0094:  MOVF   28,W
0095:  BSF    03.5
0096:  MOVWF  12
....................    setup_counters(RTCC_INTERNAL,RTCC_DIV_256);  
0097:  MOVLW  07
0098:  MOVWF  77
0099:  BTFSS  77.3
009A:  GOTO   0A5
009B:  MOVLW  07
009C:  BCF    03.5
009D:  CLRF   01
009E:  MOVLW  81
009F:  MOVWF  04
00A0:  MOVF   00,W
00A1:  ANDLW  C0
00A2:  IORLW  0F
00A3:  MOVWF  00
00A4:  BSF    03.5
00A5:  CLRWDT
00A6:  MOVLW  81
00A7:  MOVWF  04
00A8:  MOVF   00,W
00A9:  ANDLW  C0
00AA:  IORWF  77,W
00AB:  MOVWF  00
....................    enable_interrupts(INT_RDA);  
00AC:  BSF    0C.5
....................    enable_interrupts(GLOBAL);  
00AD:  MOVLW  C0
00AE:  BCF    03.5
00AF:  IORWF  0B,F
.................... while(1){  
.................... 	val1 = getchar();  
00B0:  BTFSS  0C.5
00B1:  GOTO   0B0
00B2:  MOVF   1A,W
00B3:  MOVWF  2A
....................    set_pwm2_duty(val1);  
00B4:  MOVF   2A,W
00B5:  MOVWF  1B
....................    }//while  
00B6:  GOTO   0B0
....................    }//main  
....................  
00B7:  SLEEP

Configuration Fuses:
   Word  1: 3FFE   HS WDT NOPUT NOPROTECT BROWNOUT LVP NOCPD NOWRT NODEBUG
